'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/var/www/GobBlog/client/src/components/Post.js';var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _Card = require('material-ui/Card');
var _Divider = require('material-ui/Divider');var _Divider2 = _interopRequireDefault(_Divider);
var _Badge = require('material-ui/Badge');var _Badge2 = _interopRequireDefault(_Badge);
var _RaisedButton = require('material-ui/RaisedButton');var _RaisedButton2 = _interopRequireDefault(_RaisedButton);
var _comments = require('./comments');var _comments2 = _interopRequireDefault(_comments);
var _reactFlexboxGrid = require('react-flexbox-grid');
var _Hashtag = require('./Hashtag.js');var _Hashtag2 = _interopRequireDefault(_Hashtag);
var _reactImageFile = require('react-image-file');var _reactImageFile2 = _interopRequireDefault(_reactImageFile);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
const reactStringReplace = require('react-string-replace');

class Post extends _react2.default.Component {
    constructor(props) {
        super(props);
        this.state = {
            nickProp: this.props.nickProp,
            textProp: this.props.textProp,
            colorProp: this.props.colorProp,
            G_upvote: this.props.G_upvoteProp,
            J_upvote: this.props.J_upvoteProp,
            comments: this.props.commentProp,
            image_blob: this.props.image_prop,
            image_src: "",
            id: this.props.id_prop,
            timeStamp: this.props.ts_prop,
            timeAgo: "Just now",
            timeString: "Just now",
            noComments: 0,
            combinedTitle: "",
            passPhrase: "herewego",
            openDialog: false,
            hashtag_posts: [] };

        this.give_J = this.give_J.bind(this);
        this.give_G = this.give_G.bind(this);
        this.construct_time = this.construct_time.bind(this);
    }

    componentWillMount() {
        this.construct_time();
        this.setState({
            noComments: this.state.comments.length });


        var details = {
            'id': this.state.id };

        var formBody = [];
        for (var property in details) {
            var encodedKey = encodeURIComponent(property);
            var encodedValue = encodeURIComponent(details[property]);
            formBody.push(encodedKey + "=" + encodedValue);
        }
        formBody = formBody.join("&");

    }

    /* Construct string displaying time ago since post */
    construct_time() {
        var ts = this.state.timeStamp;
        var testDate = new Date(ts * 1000).toString().slice(0, 21);
        var now = Date.now() / 1000;
        var diff = now - ts;
        var old = false;
        if (diff > 24 * 3600) {
            console.log("Over one day ago!");
            old = true;
        }
        function time(s) {
            return new Date(s * 1e3).toISOString().slice(-13, -5);
        }

        var timeString = "";
        var all = time(diff);
        var hoursAgo = all.slice(0, 2);
        if (parseInt(hoursAgo, 10) > 0) {
            timeString = timeString + hoursAgo + 'h';
        }
        var minutesAgo = all.slice(4, 5);
        if (parseInt(minutesAgo, 10) > 0) {
            timeString = timeString + minutesAgo + 'm';
        } else {
            timeString = "Just now";
            var nicks = this.state.nickProp;
            this.setState({
                combinedTitle: nicks + ", " + timeString });

            return;
        }
        timeString = timeString + " ago";
        console.log(timeString);
        var nick = this.state.nickProp;
        if (!old) {
            this.setState({
                combinedTitle: nick + " ,  " + timeString,
                timeString: timeString });

        } else {
            this.setState({
                timeString: testDate });

        }
    }

    componentDidMount() {
        console.log(this.state);
    }

    give_J() {
        var old_J = this.state.J_upvote;
        var new_J = old_J + 1;
        var old_G = this.state.G_upvote;
        var existing_nick = this.props.nickProp;
        var existing_text = this.props.textProp;
        this.setState({
            J_upvote: new_J });

        var details = {
            'nick': existing_nick,
            'text': existing_text,
            'Jvotes': new_J,
            'Gvotes': old_G };

        var formBody = [];
        for (var property in details) {
            var encodedKey = encodeURIComponent(property);
            var encodedValue = encodeURIComponent(details[property]);
            formBody.push(encodedKey + "=" + encodedValue);
        }
        formBody = formBody.join("&");
        fetch('/updatepost', {
            method: 'post',
            headers: { 'Content-type': 'application/x-www-form-urlencoded;charset=UTF-8' },
            body: formBody });

    }
    /* Le epig upboats XD */
    give_G() {
        var old_G = this.state.G_upvote;
        var new_G = old_G + 1;
        var old_J = this.state.J_upvote;
        var existing_nick = this.props.nickProp;
        var existing_text = this.props.textProp;
        this.setState({
            G_upvote: new_G });

        var details = {
            'nick': existing_nick,
            'text': existing_text,
            'Gvotes': new_G,
            'Jvotes': old_J };

        var formBody = [];
        for (var property in details) {
            var encodedKey = encodeURIComponent(property);
            var encodedValue = encodeURIComponent(details[property]);
            formBody.push(encodedKey + "=" + encodedValue);
        }
        formBody = formBody.join("&");
        fetch('/updatepost', {
            method: 'post',
            headers: { 'Content-type': 'application/x-www-form-urlencoded;charset=UTF-8' },
            body: formBody });

    }

    /* Used to calculate which color G and J should have */
    calc_color(votes) {
        if (votes < 5) {
            return "white";
        } else if (votes >= 5 && votes < 10) {
            return "yellow";
        } else if (votes >= 10 && votes < 20) {
            return "orange";
        } else {
            return "red";
        }
    }

    /* Display posts with a certain hashtag */
    get_hashtag(hashtag) {
        this.setState({
            openDialog: true });


        var query = {
            'hashtag': hashtag };

        var formBody = [];
        for (var property in query) {
            var encodedKey = encodeURIComponent(property);
            var encodedValue = encodeURIComponent(query[property]);
            formBody.push(encodedKey + "=" + encodedValue);
        }
        formBody = formBody.join("&");
        fetch('/posts', {
            method: 'POST',
            headers: { 'Content-type': 'application/x-www-form-urlencoded;charset=UTF-8' },
            body: formBody }).

        then(function (res) {
            return res.json();
        }).
        then(function (json) {
            console.log(json);
        }).
        catch(error => {
            console.log(error);
        });

        this.forceUpdate();
    }

    render() {
        const textStyle = {
            textAlign: "center",
            color: "white",
            padding: 10 };


        var headerStyle = {
            textAlign: "left",
            padding: 10 };


        var divStyle = {
            float: "center",
            margin: 0,
            padding: 0 };


        return (
            _react2.default.createElement('div', { style: { width: "100%", margin: 0 }, __source: { fileName: _jsxFileName, lineNumber: 233 }, __self: this },
                _react2.default.createElement(_Card.Card, { style: { backgroundColor: this.state.colorProp }, __source: { fileName: _jsxFileName, lineNumber: 234 }, __self: this },
                    _react2.default.createElement(_Card.CardHeader, { style: headerStyle,
                        title: this.state.nickProp,
                        subtitle: this.state.timeString, __source: { fileName: _jsxFileName, lineNumber: 235 }, __self: this }),

                    _react2.default.createElement(_Divider2.default, { __source: { fileName: _jsxFileName, lineNumber: 239 }, __self: this }),
                    _react2.default.createElement(_Card.CardText, { style: textStyle, __source: { fileName: _jsxFileName, lineNumber: 240 }, __self: this },
                        _react2.default.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 241 }, __self: this },
                            _react2.default.createElement(_reactImageFile2.default, { file: this.state.image_blob, __source: { fileName: _jsxFileName, lineNumber: 242 }, __self: this }),

                            reactStringReplace(this.state.textProp, /#(\w+)/g, (match, i) =>
                            _react2.default.createElement(_Hashtag2.default, { key: match + i, text_prop: match, __source: { fileName: _jsxFileName, lineNumber: 245 }, __self: this }, ' ')))),



                    _react2.default.createElement(_Divider2.default, { __source: { fileName: _jsxFileName, lineNumber: 249 }, __self: this }),
                    _react2.default.createElement('div', { style: divStyle, __source: { fileName: _jsxFileName, lineNumber: 250 }, __self: this },
                        _react2.default.createElement(_reactFlexboxGrid.Row, { __source: { fileName: _jsxFileName, lineNumber: 251 }, __self: this },
                            _react2.default.createElement(_reactFlexboxGrid.Col, { xs: 3, __source: { fileName: _jsxFileName, lineNumber: 252 }, __self: this },
                                _react2.default.createElement(_Badge2.default, {
                                        badgeStyle: { padding: 0, top: "10px", right: "18px", margin: "0" },
                                        badgeContent: this.state.G_upvote,
                                        primary: true, __source: { fileName: _jsxFileName, lineNumber: 253 }, __self: this },

                                    _react2.default.createElement(_RaisedButton2.default, {
                                            buttonStyle: divStyle,
                                            style: { divStyle },
                                            backgroundColor: this.calc_color(this.state.G_upvote), label: 'G!', onClick: this.give_G, __source: { fileName: _jsxFileName, lineNumber: 258 }, __self: this }, '  '))),


                            _react2.default.createElement(_reactFlexboxGrid.Col, { xs: 3, __source: { fileName: _jsxFileName, lineNumber: 264 }, __self: this },
                                _react2.default.createElement(_Badge2.default, {
                                        badgeStyle: { top: "10px", right: "18px", margin: "0" },
                                        badgeContent: this.state.J_upvote,
                                        primary: true, __source: { fileName: _jsxFileName, lineNumber: 265 }, __self: this }, ' ',
                                    _react2.default.createElement(_RaisedButton2.default, { backgroundColor: this.calc_color(this.state.J_upvote), label: 'J..', onClick: this.give_J, __source: { fileName: _jsxFileName, lineNumber: 269 }, __self: this }, '  '))),


                            _react2.default.createElement(_reactFlexboxGrid.Col, { xs: 6, style: { marginTop: 11 }, __source: { fileName: _jsxFileName, lineNumber: 272 }, __self: this },
                                _react2.default.createElement(_comments2.default, { id_prop: this.state.id, commentProp: this.state.comments,
                                        color_prop: this.state.colorProp, __source: { fileName: _jsxFileName, lineNumber: 273 }, __self: this }, ' View ')))))));






    }}


Post.defaultProps = {
    nickProp: "Gorg",
    textProp: "AFFFF",
    colorProp: "#ff66cc",
    socketProp: "",
    J_upvoteProp: 0,
    G_upvoteProp: 0,
    commentProp: [],
    id_prop: "",
    ts_prop: 0 };exports.default =


Post;